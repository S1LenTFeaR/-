CREATE DATABASE ProductShop;
USE ProductShop;
SHOW TABLES;
DROP TABLE Склад;
DESC TABLE Склад;

SELECT * FROM Продукция;
SELECT * FROM Товар;
SELECT * FROM Чек;
SELECT * FROM Продавец;

CREATE TABLE Продукция ( 
 Название_продукции VARCHAR(10) NOT NULL UNIQUE PRIMARY KEY,
 Количество_продукции INT NOT NULL,
 Стоимость_продукции DECIMAL(4,2) NOT NULL
);

CREATE TABLE Продавец ( 
 ID_продавца INT UNSIGNED NOT NULL AUTO_INCREMENT UNIQUE PRIMARY KEY,
 Имя_продавца VARCHAR(10) NOT NULL,
 Номер_телефона BIGINT( UNIQUE,
 eMail VARCHAR(30) UNIQUE
);

CREATE TABLE Чек ( 
 Номер_чека INT UNSIGNED NOT NULL AUTO_INCREMENT UNIQUE PRIMARY KEY,
 Количество_товаров INT UNSIGNED NOT NULL, 
 Дата_совершения DATE NOT NULL,
 Суммарная_стоимость DECIMAL(5,2) UNSIGNED NOT NULL,
 ID_продавца INT UNSIGNED NOT NULL REFERENCES Продавец(ID_продавца)
);



CREATE TABLE Товар ( 
 Название_продукции VARCHAR(10) NOT NULL REFERENCES Продукция(Название_продукции),
 ID_продукта INT UNSIGNED NOT NULL AUTO_INCREMENT UNIQUE PRIMARY KEY, 
 Номер_чека INT UNSIGNED REFERENCES Чек(Номер_чека)
);

INSERT INTO Продукция VALUES('Хлеб',5,26.00);
INSERT INTO Продукция VALUES('Лимоад',3,36.00);
INSERT INTO Продукция VALUES('Лапша',6,10.00);
INSERT INTO Продукция VALUES('Чизбургер',2,49.00);

INSERT INTO Товар(Название_продукции) VALUES('Хлеб');
INSERT INTO Товар(Название_продукции) VALUES('Хлеб');
INSERT INTO Товар(Название_продукции) VALUES('Хлеб');
INSERT INTO Товар(Название_продукции) VALUES('Хлеб');
INSERT INTO Товар(Название_продукции) VALUES('Хлеб');

INSERT INTO Товар(Название_продукции) VALUES('Лимонад');
INSERT INTO Товар(Название_продукции) VALUES('Лимонад');
INSERT INTO Товар(Название_продукции) VALUES('Лимонад');

INSERT INTO Товар(Название_продукции) VALUES('Лапша');
INSERT INTO Товар(Название_продукции) VALUES('Лапша');
INSERT INTO Товар(Название_продукции) VALUES('Лапша');
INSERT INTO Товар(Название_продукции) VALUES('Лапша');
INSERT INTO Товар(Название_продукции) VALUES('Лапша');
INSERT INTO Товар(Название_продукции) VALUES('Лапша');

INSERT INTO Товар(Название_продукции) VALUES('Чизбургер');
INSERT INTO Товар(Название_продукции) VALUES('Чизбургер');

INSERT INTO Продавец VALUES(NULL,'Андрей',NULL,NULL);
INSERT INTO Продавец VALUES(NULL,'Денис',NULL,NULL);
INSERT INTO Продавец VALUES(NULL,'Евгений',NULL,NULL);

INSERT INTO Чек VALUES(NULL,3,NOW(),72.00,1); 			//Хлеб, лимонад, лапша
INSERT INTO Чек VALUES(NULL,1,'2019-10-24',49.00,3); 	//Чизбургер
INSERT INTO Чек VALUES(NULL,3,'2019-10-28',30.00,2);	//Лапша(3)
INSERT INTO Чек VALUES(NULL,2,'2019-10-29',85.00,3);	//Чизбургер, лимонад

 UPDATE товар
 SET Номер_чека = 1
 WHERE ID_продукта = 1;
 UPDATE товар
 SET Номер_чека = 1
 WHERE ID_продукта = 6;
 UPDATE товар
 SET Номер_чека = 1
 WHERE ID_продукта = 9;
 
 UPDATE товар
 SET Номер_чека = 2
 WHERE ID_продукта = 15;
 
 UPDATE товар
 SET Номер_чека = 3
 WHERE ID_продукта = 10;
 UPDATE товар
 SET Номер_чека = 3
 WHERE ID_продукта = 11;
 UPDATE товар
 SET Номер_чека = 3
 WHERE ID_продукта = 12;
 
 UPDATE товар
 SET Номер_чека = 4
 WHERE ID_продукта = 7;
 UPDATE товар
 SET Номер_чека = 4
 WHERE ID_продукта = 16;
 
 UPDATE продавец
 SET Номер_телефона = 672345
 WHERE ID_продавца = 1;
 UPDATE продавец
 SET eMail = 'Andruha@icloud.com'
 WHERE ID_продавца = 1;
 
 UPDATE продавец
 SET Номер_телефона = 88005553535
 WHERE ID_продавца = 2;
 UPDATE продавец
 SET eMail = 'debis@gmail.com'
 WHERE ID_продавца = 2;
 
 INSERT INTO Продукция VALUES('Молоко',3,40.00);
 INSERT INTO Продукция VALUES('Рис',2,30.00);
 INSERT INTO Продукция VALUES('Банан',10,8.00);
 
 INSERT INTO Товар(Название_продукции) VALUES('Молоко');
 INSERT INTO Товар(Название_продукции) VALUES('Молоко');
 INSERT INTO Товар(Название_продукции) VALUES('Молоко');
 
 INSERT INTO Товар(Название_продукции) VALUES('Рис');
 INSERT INTO Товар(Название_продукции) VALUES('Рис');
 
 INSERT INTO Товар(Название_продукции) VALUES('Банан');
 INSERT INTO Товар(Название_продукции) VALUES('Банан');
 INSERT INTO Товар(Название_продукции) VALUES('Банан');
 INSERT INTO Товар(Название_продукции) VALUES('Банан');
 INSERT INTO Товар(Название_продукции) VALUES('Банан');
 INSERT INTO Товар(Название_продукции) VALUES('Банан');
 INSERT INTO Товар(Название_продукции) VALUES('Банан');
 INSERT INTO Товар(Название_продукции) VALUES('Банан');
 INSERT INTO Товар(Название_продукции) VALUES('Банан');
 INSERT INTO Товар(Название_продукции) VALUES('Банан'); 
 
 INSERT INTO Чек VALUES(NULL,2,NOW(),48.00,2);			//Молоко, Банан
 INSERT INTO Чек VALUES(NULL,5,'2019-11-07',80.00,3);	//Хлеб, Рис, Банан(3)
 INSERT INTO Чек VALUES(NULL,3,NOW(),92.00,1);			//Лимонад, Хлеб, Рис
 INSERT INTO Чек VALUES(NULL,4,'2019-11-06',32.00,3);	//Банан(4)
 
 UPDATE товар
 SET Номер_чека = 5
 WHERE ID_продукта = 17;
 UPDATE товар
 SET Номер_чека = 5
 WHERE ID_продукта = 22;
 
 UPDATE товар
 SET Номер_чека = 6
 WHERE ID_продукта = 2;
 UPDATE товар
 SET Номер_чека = 6
 WHERE ID_продукта = 20;
 UPDATE товар
 SET Номер_чека = 6
 WHERE ID_продукта = 23;
 UPDATE товар
 SET Номер_чека = 6
 WHERE ID_продукта = 24;
 UPDATE товар
 SET Номер_чека = 6
 WHERE ID_продукта = 25;
 
 UPDATE товар
 SET Номер_чека = 7
 WHERE ID_продукта = 8;
 UPDATE товар
 SET Номер_чека = 7
 WHERE ID_продукта = 3;
 UPDATE товар
 SET Номер_чека = 7
 WHERE ID_продукта = 21;
 
 UPDATE товар
 SET Номер_чека = 8
 WHERE ID_продукта = 26;
 UPDATE товар
 SET Номер_чека = 8
 WHERE ID_продукта = 27;
 UPDATE товар
 SET Номер_чека = 8
 WHERE ID_продукта = 28;
 UPDATE товар
 SET Номер_чека = 8
 WHERE ID_продукта = 29;
 
 SELECT DISTINCT Название_продукции 
 FROM Товар; 
 SELECT DISTINCT Номер_чека 
 FROM Товар; 
 SELECT DISTINCT ID_продавца 
 FROM чек; 
 
 SELECT Название_продукции 
 FROM Товар; 
 
 SELECT Товар.Название_продукции, Товар.Номер_чека, Чек.Дата_совершения
 FROM Товар, Чек
 WHERE Товар.Номер_чека=Чек.Номер_чека; 
 
 SELECT Название_продукции, ID_продукта
 FROM Товар
 WHERE Номер_чека is NULL;
 
 SELECT Название_продукции, ID_продукта
 FROM Товар
 WHERE Номер_чека is NOT NULL;
 
 SELECT Название_продукции, MIN(ID_продукта) 
 FROM Товар
 GROUP BY Название_продукции;

 SELECT Название_продукции, MIN(ID_продукта)
 FROM Товар 
 GROUP BY Название_продукции 
 HAVING AVG(ID_продукта) > 15;
 
 SELECT Товар.Название_продукции, Товар.Номер_чека, Чек.Дата_совершения
 FROM Товар, Чек
 WHERE Товар.Номер_чека=Чек.Номер_чека 
 ORDER BY Товар.Номер_чека asc; 
 
 SELECT Название_продукции, ID_продукта, Номер_чека
 FROM Товар
 WHERE Номер_чека is NULL
 UNION
 SELECT Название_продукции, ID_продукта, Номер_чека
 FROM Товар
 WHERE Номер_чека is NOT NULL
 ORDER BY 3; 
 
 Аналогичны
 
 SELECT Название_продукции, ID_продукта, Номер_чека
 FROM Товар
 WHERE Номер_чека is NULL
 INTERSECT
 SELECT Название_продукции, ID_продукта, Номер_чека
 FROM Товар
 WHERE Номер_чека is NOT NULL; 
 
 SELECT Товар.Название_продукции
 FROM Товар
 WHERE Товар.Номер_чека > 1
 AND Товар.Название_продукции IN
 (SELECT Товар.Название_продукции
 FROM Товар
 WHERE Товар.Номер_чека >2); 
 
 
 SELECT * 
 FROM продукция 
 INNER JOIN товар ON продукция.Название_продукции = товар.Название_продукции;
 
 SELECT чек.Номер_чека, чек.Дата_совершения, товар.Название_продукции, товар.ID_продукта
 FROM чек 
 INNER JOIN товар ON чек.Номер_чека = товар.Номер_чека;
 
 ALTER TABLE чек MODIFY
 Количество_товаров INT UNSIGNED;
 ALTER TABLE чек MODIFY
 Дата_совершения DATE;
 ALTER TABLE чек MODIFY
 Суммарная_стоимость DECIMAL(5,2) UNSIGNED;
 ALTER TABLE чек MODIFY
 ID_продавца INT UNSIGNED;
 
 INSERT INTO Чек(Номер_чека) VALUES(NULL);
 
 SELECT Товар.Название_продукции, Товар.Номер_чека, Чек.Номер_чека, Чек.Суммарная_стоимость
 FROM Товар
 LEFT OUTER JOIN Чек ON Товар.Номер_чека = Чек.Номер_чека;

 SELECT Товар.Название_продукции, Товар.Номер_чека, Чек.Номер_чека, Чек.Суммарная_стоимость
 FROM Товар
 RIGHT OUTER JOIN Чек ON Товар.Номер_чека = Чек.Номер_чека;
 
 SELECT Товар.Название_продукции, Товар.Номер_чека, Чек.Номер_чека, Чек.Суммарная_стоимость
 FROM Товар
 LEFT OUTER JOIN Чек ON Товар.Номер_чека = Чек.Номер_чека
 UNION
 SELECT Товар.Название_продукции, Товар.Номер_чека, Чек.Номер_чека, Чек.Суммарная_стоимость
 FROM Товар
 RIGHT OUTER JOIN Чек ON Товар.Номер_чека = Чек.Номер_чека; 
 
 SELECT * 
 FROM Товар
 CROSS JOIN Чек;

 
 CREATE PROCEDURE z2 ()
 SELECT Товар.Название_продукции, Товар.Номер_чека, Чек.Номер_чека, Чек.Суммарная_стоимость
 FROM Товар
 RIGHT OUTER JOIN Чек ON Товар.Номер_чека = Чек.Номер_чека;
 
 CALL z2;
 DROP PROCEDURE z2;
 
 CREATE PROCEDURE z3 ()
 UPDATE Продукция SET Стоимость_продукции=Стоимость_продукции*0.9
 WHERE Название_продукции = "Лапша";
 
 CALL z3;
 DROP PROCEDURE z3;
 
 CREATE PROCEDURE z4 (k VARCHAR(20))
 SELECT *
 FROM Товар
 WHERE Название_продукции = k;
 
 CALL z4 ("Банан");
 DROP PROCEDURE z4;
 
 CREATE PROCEDURE z5 (k VARCHAR(20), p FLOAT)
 UPDATE Продукция SET Стоимость_продукции=Стоимость_продукции*(1-p)
 WHERE Название_продукции=k;
 
 SELECT * FROM Продукция;
 
 CALL z5 ("Банан", 0.1);
 DROP PROCEDURE z5;
 
 CREATE PROCEDURE z6 (m int, OUT s FLOAT) 
 SELECT s=Sum(Чек.Суммарная_стоимость)  
 FROM Чек  
 GROUP BY Month(Чек.Дата_совершения)
 HAVING Month(Чек.Дата_совершения)=m;
 
 CALL z6 (11);
 DROP PROCEDURE z6;
 
 CREATE VIEW v1 AS    
 (SELECT Номер_чека,Дата_совершения, Суммарная_стоимость FROM Чек WHERE Номер_чека<5)    
 WITH CHECK OPTION;
 
 SELECT * FROM v1;
 DROP VIEW v1;
 
 CREATE VIEW v2 AS    
 (SELECT * FROM Продукция WHERE Стоимость_продукции<40)    
 WITH CHECK OPTION;
 
 SELECT * FROM v2;
 SELECT * FROM Продукция;
 
 INSERT INTO v2 VALUES('Мандарины',5,30);
 INSERT INTO v2 VALUES('Мандарины',5,60);
 DELETE FROM Продукция WHERE Название_продукции='Мандарины';
 
 CREATE VIEW v3 AS    
 (SELECT * FROM Продукция WHERE Стоимость_продукции<40);
 
 INSERT INTO v3 VALUES('Мандарины',5,30);
 INSERT INTO v3 VALUES('Мандарины',5,60);
 DELETE FROM Продукция WHERE Название_продукции='Мандарины';
 
 SELECT * FROM v3;
 SELECT * FROM Продукция;
 
 CREATE VIEW v3_1 AS    
 (SELECT * FROM v3 WHERE Стоимость_продукции<80)    
 WITH LOCAL CHECK OPTION;
 
 INSERT INTO v3_1 VALUES('Мандарины',5,60);
 
 SELECT * FROM v3_1;
 SELECT * FROM Продукция;
 
 CREATE VIEW v3_2 AS    
 (SELECT * FROM v3 WHERE Стоимость_продукции<80)    
 WITH CASCADED CHECK OPTION;
 
 INSERT INTO v3_2 VALUES('Лимоны',9,60);
 
 По умолчанию уровень изоляции устанавливается для последующей (не начальной) транзакции. 
 При использовании ключевого слова GLOBAL данная команда устанавливает уровень изоляции 
 по умолчанию глобально для всех новых соединений, созданных от этого момента. 
 Однако для того чтобы выполнить данную команду, необходима привилегия SUPER. 
 При использовании ключевого слова SESSION устанавливается уровень изоляции по 
 умолчанию для всех будущих транзакций, выполняемых в текущем соединении.
 
 
 SET [GLOBAL | SESSION] TRANSACTION ISOLATION LEVEL
{ READ UNCOMMITTED | READ COMMITTED | REPEATABLE READ | SERIALIZABLE }

 SET GLOBAL TRANSACTION ISOLATION LEVEL SERIALIZABLE;
 
  set autocommit=0;
 
 Start transaction; 
 (также, можно написать BEGIN; )
 
 ROLLBACK;
 COMMIT;
 
 END;
 
 BEGIN;
 INSERT INTO v3_2 VALUES('Лимоны',9,60);
 SELECT * FROM Продукция;
 CALL z4 ("Банан", 0.1);
 SELECT * FROM Продукция;
 ROLLBACK;
 SELECT * FROM Продукция;

 INSERT INTO Продукция VALUES('Печенье',3,70.00);
 INSERT INTO Товар(Название_продукции) VALUES('Печенье'); 
 INSERT INTO Товар(Название_продукции) VALUES('Печенье'); 
 INSERT INTO Товар(Название_продукции) VALUES('Печенье'); 
 SELECT * FROM Продукция;
 SELECT * FROM Товар;
 ROLLBACK;
 SELECT * FROM Продукция;
 SELECT * FROM Товар;
 
 INSERT INTO Продукция VALUES('Печенье',3,70.00);
 INSERT INTO Товар(Название_продукции) VALUES('Печенье'); 
 INSERT INTO Товар(Название_продукции) VALUES('Печенье'); 
 INSERT INTO Товар(Название_продукции) VALUES('Печенье'); 
 SELECT * FROM Продукция;
 SELECT * FROM Товар;
 COMMIT;
 SELECT * FROM Продукция;
 SELECT * FROM Товар;
 ROLLBACK;
 SELECT * FROM Продукция;
 SELECT * FROM Товар;

 SAVEPOINT s1;
 SELECT * FROM Продукция;
 SELECT * FROM Товар;
 ROLLBACK WORK TO SAVEPOINT s1;
 DELETE FROM Продукция WHERE Название_продукции='Печенье';
 DELETE FROM Товар WHERE Название_продукции='Печенье';
 SAVEPOINT s2;
 SELECT * FROM Продукция;
 SELECT * FROM Товар;
 ROLLBACK WORK TO SAVEPOINT s1;
 SELECT * FROM Продукция;
 SELECT * FROM Товар;


 Неповторяющееся чтение
 Транзакция 1						Транзакция 2
 SELECT Стоимость_продукции FROM Продукция		SELECT Стоимость_продукции FROM Продукция
 WHERE Название_продукции='Банан';			WHERE Название_продукции='Банан';

 UPDATE Продукция SET Стоимость_продукции=60
 WHERE Название_продукции='Банан';
							SELECT Стоимость_продукции FROM Продукция
							WHERE Название_продукции='Банан';

 Грязное чтение
 Транзакция 1						Транзакция 2
 SELECT Стоимость_продукции FROM Продукция		
 WHERE Название_продукции='Банан';

 UPDATE Продукция SET Стоимость_продукции=20		
 WHERE Название_продукции='Банан';
							SELECT Стоимость_продукции FROM Продукция		
							WHERE Название_продукции='Банан';

 ROLLBACK;
 SET GLOBAL TRANSACTION ISOLATION LEVEL READ COMMITED;
 
 https://losst.ru/sozdanie-polzovatelya-mysql
 
 CREATE USER test_user111@localhost IDENTIFIED BY '123451';
 Показать пользователей:
 SELECT User,Host FROM mysql.user;
 Выдаем привелегии:
 GRANT SELECT ON Товар TO test_user111@localhost;
 Посмотрим привилегии нашего пользователя:
 SHOW GRANTS FOR test_user111@localhost;
 После обновления прав пользователя необходимо обновить таблицу прав пользователей MySQL в памяти.
 FLUSH PRIVILEGES;
 Заберём все права
 REVOKE ALL PRIVILEGES ON Товар FROM test_user111@localhost;
 
 CREATE USER test_user112@localhost IDENTIFIED BY '123451';
 GRANT ALL PRIVILEGES ON Товар TO test_user112@localhost WITH GRANT OPTION;
 GRANT ALL PRIVILEGES ON Продукция TO test_user112@localhost WITH GRANT OPTION;
 SHOW GRANTS FOR test_user112@localhost;



 
 
 
 
 
 
 
 
 

 
